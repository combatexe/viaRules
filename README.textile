h1. viadee Business Rules Engine (viaRules)

p. The viadee business rules engine (viaRules) is a small and lightweight rule engine for mobile applications running "Android":http://www.android.com/ and/or other restricted environments such as "GWT":http://code.google.com/webtoolkit/.

p. This engine is intended to be extended and customized for a specific domain (your projects field of expertise) and therefore only provides barebone functionality of a business rules engine. To use it in your project you'll have to provide your domain specific predicates and conclusions so they can be used by business rules. The "Predicates":http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/base/Predicate.html definition is taken from the "Guava libraries":http://code.google.com/p/guava-libraries/ and you'll either have to implement the specified interface directly or implement a subclass of it. @Conclusion@ implementations are most likely single-method objects which perform some sort of action. The interface only defines one method and does not restrict you in any way. To create a new rule use the previously created predicate and your new command. You can group several conclusions together with the help of several utility methods.

p. Additionally there are some factories defined which help in creating rules (using static imports):

bc. 
final Rule rule = rule().called(_name_)
                        .when(and(_predicate_1_, _predicate_2_))
                        .then(conclude(_conclusion_1_, _coclusion_2))
                        
p. Or if you have a pre-built @Predicate@ and @Conclusion@:

bc. 
final Rule rule = rule().called(_name_)
                        .when(_predicate_)
                        .then(_conclusion_ )

p. To evaluate your business rules you'll have to create three objects:

# An instance of @RuleEngine@.
# An instance of @InferenceContext@.
# A @Set@ of @Rule@ objects.

p. 1 and 3 are easy to do since the viaRules project already includes a simple implementation of the @RuleEngine@ interface called @SimpleRuleEngine@ and a set of rules can be simply created with the standard Java library. The @InferenceContext@ (point 2) however may need some more work.

p. It may be necessary that you need some sort of contextual information inside both your predicates and conclusions. The @InferenceContext@ is your way to make those informations available. In the simple case that your predicate and/or conclusion just needs the _topic_ of the context, you can call the available interface method directly. However it is more likely that you'll end up writing and extending your own context beyond that of the generic context provided by this project. During our internal development, we created an Android specific context which was tailored to our domain and thus provides methods to e.g. get the current GPS coordinates. Since those methods won't work in an environment which does not have access to a GPS sensor (or any other domain specific functionality) we decided to leave those out. The API further acknowledges this by using @<C extends InferenceContext<?>>@ as type parameter for all methods which expect an @InferenceContext@.

h2. License

p. The viaRules project is licensed under the "Apache Software License, Version 2.0":http://www.apache.org/licenses/LICENSE-2.0/.

h2. Integration

p. To use the business rules engine inside your own projects just declare the following dependency inside your _POM_ :

bc. 
<dependency>
  <groupId>de.viadee.rules</groupId>
  <artifactId>viaRules-core</artifactId>
  <version>2.0.0</version>
</dependency>

p. Alternatively copy the latest _JAR_  from our "download archive":https://github.com/viadee/viaRules-core/downloads to your projects library folder and/or put it in your classpath.

h1. Development

h2. Setup

p. The viaRules project is using "Maven":http://maven.apache.org/, "Eclipse":http://eclipse.org/ and "Git":http://git-scm.com/ as the main development tools. To build the project yourself just download & install at least Maven 3.0 and call *mvn install* inside the project folder. Maven should then proceed to clean, test, build, package and install the business rules engine.

h2. Versioning

p. The viaRules project follows the "semantic versioning":http://semver.org/ guidelines.